function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Aug-2016 21:56:02.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 100xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
IW1_1 = [7.9000000000000004 3.7999999999999998 6.4000000000000004 2;7.6666666666666661 2.7999999999999998 6.7333333333333334 2.1333333333333333;7.3499999999999996 2.8499999999999996 6.1999999999999993 1.8500000000000001;7.2000000000000002 3.2000000000000002 6 1.8;6.9500000000000002 3.1500000000000004 4.8000000000000007 1.45;6.666666666666667 3.0666666666666664 4.5 1.4333333333333331;6.4249999999999989 3.25 3.6499999999999999 1.075;5.7999999999999998 4 1.2 0.20000000000000001;5.7000000000000002 4.4000000000000004 1.5 0.40000000000000002;5.3499999999999996 4.1500000000000004 1.45 0.15000000000000002;7.2000000000000002 3.6000000000000001 6.0999999999999996 2.5;7.7000000000000002 3 6.0999999999999996 2.2999999999999998;6.8499999999999996 3.0499999999999998 5.4500000000000002 2.1000000000000001;6.822222222222222 3.0444444444444447 5.0333333333333332 1.8111111111111111;6.7999999999999998 2.7999999999999998 4.7999999999999998 1.3999999999999999;6.5499999999999998 2.8499999999999996 4.5999999999999996 1.3999999999999999;6.1714285714285717 3.371428571428571 3.1285714285714281 0.89999999999999991;5.7000000000000002 3.7999999999999998 1.7 0.29999999999999999;5.4000000000000004 3.8999999999999999 1.7 0.40000000000000002;5.0999999999999996 3.7999999999999998 1.8999999999999999 0.40000000000000002;6.7333333333333334 3.1999999999999993 5.7333333333333325 2.3999999999999995;7.0999999999999996 3 5.9000000000000004 2.1000000000000001;6.7000000000000002 3.2999999999999998 5.7000000000000002 2.1000000000000001;6.8000000000000007 3.0499999999999998 5.1500000000000004 2.2999999999999998;6.7000000000000002 3 5 1.7;6.4000000000000004 3.2000000000000002 4.5 1.5;6.3000000000000007 2.8999999999999999 4.2999999999999998 1.3;5.5624999999999991 3.5374999999999996 1.8500000000000001 0.40000000000000002;5.3666666666666671 3.7666666666666666 1.4333333333333333 0.26666666666666666;5.0999999999999996 3.7999999999999998 1.55 0.25;6.5 3 5.7999999999999998 2.2000000000000002;6.2999999999999998 3.2999999999999998 6 2.5;6.2999999999999989 3.3333333333333335 5.4333333333333327 2.333333333333333;6.5 3.2000000000000002 5.0999999999999996 2;6.2999999999999998 3.2999999999999998 4.7000000000000002 1.6000000000000001;5.9000000000000004 3 4.2000000000000002 1.5;5.8428571428571416 3.1714285714285708 3.214285714285714 0.92857142857142849;5.4000000000000004 3.3999999999999999 1.7 0.20000000000000001;5.2999999999999998 3.4666666666666663 1.3999999999999999 0.20000000000000001;5.0499999999999998 3.5 1.3500000000000001 0.29999999999999999;6.7000000000000002 2.5 5.7999999999999998 1.8;6.4000000000000004 2.7999999999999998 5.5999999999999996 2.1500000000000004;6.5 3 5.2000000000000002 2;6.0999999999999996 2.9333333333333331 4.833333333333333 1.7999999999999998;5.9000000000000004 3.2000000000000002 4.7999999999999998 1.8;6 3.3999999999999999 4.5 1.6000000000000001;5.5999999999999996 2.8999999999999999 3.6000000000000001 1.3;5.0333333333333332 3.3999999999999999 1.6333333333333333 0.5;5.0499999999999998 3.3999999999999999 1.5 0.20000000000000001;5 3.6000000000000001 1.3999999999999999 0.20000000000000001;6.2999999999999998 2.8999999999999999 5.5999999999999996 1.8;6.4000000000000004 2.7000000000000002 5.2999999999999998 1.8999999999999999;6.2999999999999998 2.7000000000000002 4.9000000000000004 1.8;6.0666666666666664 2.9333333333333331 4.5999999999999996 1.4333333333333331;5.5 3 4.5 1.5;5.5999999999999996 3.0444444444444443 3.9000000000000004 1.2444444444444442;4.7999999999999998 3.3999999999999999 1.8999999999999999 0.20000000000000001;4.7999999999999998 3.3999999999999999 1.6000000000000001 0.20000000000000001;5 3.2999999999999998 1.3999999999999999 0.20000000000000001;5 3.2000000000000002 1.2 0.20000000000000001;6.4500000000000002 3.0499999999999998 5.5 1.8;6.0999999999999996 2.6000000000000001 5.5999999999999996 1.3999999999999999;6.2999999999999998 2.5 4.9000000000000004 1.5;6.0999999999999996 2.7999999999999998 4.7000000000000002 1.2;5.7000000000000002 2.7999999999999998 4.5 1.3;5.6500000000000004 2.9500000000000002 4.1500000000000004 1.3;5.3166666666666655 3.0083333333333333 2.7999999999999998 0.70833333333333326;4.9000000000000004 3.0749999999999997 1.55 0.14999999999999999;4.6500000000000004 3.1749999999999998 1.4500000000000002 0.20000000000000001;4.5999999999999996 3.6000000000000001 1 0.20000000000000001;6.2999999999999998 2.7999999999999998 5.0999999999999996 1.5;6 2.2000000000000002 5 1.5;6.25 2.25 4.4500000000000002 1.3999999999999999;5.871428571428571 2.5999999999999996 4.3999999999999995 1.3;5.6500000000000004 2.75 4.1500000000000004 1.3;6.0999999999999996 2.7999999999999998 4 1.3;5.1454545454545455 2.9545454545454541 2.1181818181818182 0.43636363636363634;4.8499999999999996 3 1.3999999999999999 0.25;4.5999999999999996 3.3999999999999999 1.3999999999999999 0.29999999999999999;4.4000000000000004 2.9500000000000002 1.3500000000000001 0.20000000000000001;5.875 2.7750000000000004 5.0999999999999996 1.8;5.7000000000000002 2.5 5 2;5.8833333333333329 2.4333333333333336 4.6999999999999993 1.5833333333333333;5.5 2.6000000000000001 4.4000000000000004 1.2;5.5 2.3999999999999999 4 1.3;5.7999999999999989 2.666666666666667 3.9999999999999991 1.1333333333333333;5.7000000000000002 2.6000000000000001 3.5 1;5.0249999999999995 2.6000000000000001 2.6000000000000001 0.71249999999999991;4.8100000000000005 2.7400000000000007 2.1600000000000001 0.53000000000000003;4.2999999999999998 3 1.1000000000000001 0.10000000000000001;5.7999999999999998 2.7999999999999998 5.0999999999999996 2.3999999999999999;5.5999999999999996 2.7999999999999998 4.9000000000000004 2;4.9000000000000004 2.5 4.5 1.7;5.2000000000000002 2.7000000000000002 3.8999999999999999 1.3999999999999999;5.5499999999999998 2.4500000000000002 3.7999999999999998 1.05;6 2.2000000000000002 4 1;5 2 3.5 1;5 2.3999999999999995 3.1999999999999997 1.0333333333333332;4.8166666666666655 2.3999999999999999 2.6333333333333329 0.76666666666666661;4.5 2.2999999999999998 1.3 0.29999999999999999];


% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
  [S,R] = size(w);
  Q = size(p,2);
  if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
  else
    z = iNegDistApplyCPU(w,p,S,Q);
  end
end
function z = iNegDistApplyCPU(w,p,S,Q)
  z = zeros(S,Q);
  if (Q<S)
    pt = p';
    for q=1:Q
      z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
  else
    wt = w';
    for i=1:S
      z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
  end
  z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
  p = reshape(p,1,R,Q);
  sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
  z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
  sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
  if isempty(n)
    a = n;
  else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
  end
end
